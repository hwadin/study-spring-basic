"스프링 소스코드는 객체를 조직화하는 설계에대한 모범답안과도 같았다."
"스프링은 단순한 프레임워크가 아닌 플랫폼으로 발전했다는 사실"
"앱 프레임워크는 앱 개발을 빠르고 효율적으로 할 수 있도록
 앱의 바탕이 되는 틀 / 공통 프로그래밍 모델 / 기술 API 등을 제공해준다"

1.앱의 기본 틀 - 스프링 컨테이너(S.C)
"스프링은 S.C 또는 앱 컨텍스트라고 불리는
 스프링 런타임 엔진을 제공한다. S.C는 설정 정보를 참고하여
 앱을 구성하는 오브젝트를 생성하고 관리한다."

2.공통 프로그래밍 모델 - IoC/DI, 서비스 추상화, AOP
- IoC/DI : 오브젝트의 생명주기와 의존 관계에 대한 프로그래밍 모델
 스프링이 직접 제공하는 모든 기술과 API, 컨테이너가 위 모델을 따름
- 서비스 추상화 : 높은 이식성, 유연한 앱 개발
 구체적인 기술과 환경에 종속되지 않도록 유연한 추상 계층을 구성
- AOP : 앱 코드에 산재하는 부가적 기능을 독립 모듈화(관심 분리)

스프링을 사용한다는 것은 공통 프로그래밍 모델을 적극 활용하며
클래스는 S.C 위에서 오브젝트로 만들어져 동작하게 만드는 것

스프링은 개발자가 작성한 코드를 얹혀 동작하는 프레임워크 . .

디자인 패턴은 각 패턴의 핵심이 담긴 목적 또는 의도가 중요하다.

클래스끼리 서로 너무 많은 정보를 알고 있으면 안된다.
다른 말로 종속적인 관계를 가지면 안되는 것이다.
인터페이스는 느슨한 연결 고리,
추상화란 어떤 것들의 공통적인 성격을 뽑아내어 분리하는 작업.
자바가 추상화를 우해 제공하는 가장 유용한 도구가 바로 인터페이스
인터페이스는 자신을 구현한 클래스에 대한 구체적인 정보를 모두 감춤
의존성을 완전히 없애기엔 반드시 생성자 하나는 남는다
특정 구현 클래스 사이의 관계를 설정해주는 것에 관한 관심..
즉 없애지 못한다면 결코 독립적으로 확장 가능한 클래스가 될 수 없다.

클라이언트 오브젝트가 제3의 관심사항인 두 오브젝트의 관계를 
결정해주는 기능을 분리해서 두기에 적절한 곳임

오브젝트 사이의 관계와 클래스 사이의 관계를 구분해야함.
응집도가 높다는 말은 단순히 클래스 레벨에만 적용되는 말이 아니다.

결합도 "하나의 오브젝트가 변경이 일어날 때에 관계를 맺고 있는
 다른 오브젝트에게 변화를 요구하는 정도"

"스프링이란 바로 지금까지 설명한 객체지향적 설계 원칙과
디자인 패턴에 나타난 장점을 자연스럽게 개발자들이
활용할 수 있게 해주는 프레임워크다"

리팩토링 과정은 꾸준한 테스트를 동반해야함.

제어의 역전(IoC) : 간단히 프로그램의 제어 흐름 구조가 뒤바뀌는 것
오브젝트가 자신이 사용할 오브젝트를 스스로 선택하지 않는다.
당연히 생성하지도 않는다.
자신도 어떻게 만들어지고 어디서 사용되는지를 알 수 없다.
모든 제어 권한을 자신이 아닌 다른 대상에게 위임하기 때문이다.
모든 오브젝트는 이렇게 위임받은 제어 권한을 갖는 특별한
오브젝트에 의해 결정되고 만들어진다.
예시로 서블릿을 톰캣에 배포할 수는 있지만
 그 실행을 개발자가 직접 제어할 수 있는 방법은 없다.

프레임워크는 앱 코드가 프레임워크에 의해 사용된다.
프레임워크 위에 개발한 클래스를 등록해두고, 프레임워크가
흐름을 주도하는 중에 개발자가 만든 앱 코드를 사용하도록 만드는 방식
프레임워크는 분명한 제어의 역전 개념이 적용되어 있어야 한다.
앱 코드는 프레임워크가 짜놓은 틀에서 수동적으로 동작해야 한다.

역할과 실체를 분리한다.
관심을 분리하고 책임을 나누고
유연하게 확장 가능한 구조로 만든다.
결합도는 낮추고 응집도는 높인다.

스프링은 IoC를 모든 기능의 기초가 되는 기반 기술로 삼고 있으며
IoC를 극한까지 적용하고 있는 프레임워크다.

스프링의 핵심을 담당하는 건 빈 팩토리 또는 앱 컨텍스트라고 불리는 것
이 두 가지는 우리가 만든 DaoFactory가 하는 일을 좀 더 일반화한 것이다.

빈 팩토리 : 빈의 생성과 관계 설정 같은 제어를 담당하는 IoC 오브젝트
보통 빈 팩토리보다는 이를 좀 더 확장한 application context를 주로 사용
(IoC 컨테이너 or 스프링 컨테이너)
ApplicationContext는 BeanFactory를 상속한다.

IoC라고 해서 의존성 주입 관점으로만 바라보지 않는다.
application context의 다양한 역할
-오브젝트 생성과 관계 설정
-오브젝트가 만들어지는 방식, 시점과 전략을 다르게 가져갈 수 있음
-자동생성, 오브젝트에 대한 후처리, 정보의 조합, 설정 방식의 다변화
 인터셉팅 등 오브젝트를 효과적으로 활용할 수 있는 다양한 기능을 제공
-또, 빈이 사용할 수 있는 기반기술 서비스나 외부 시스템과의
 연동 등을 컨테이너 차원에서 제공해주기도 한다.

컨테이너라는 말 자체가 IoC의 개념을 담고 있다.
ApplicationContext 인터페이스를 구현한 오브젝트는 
하나의 앱에 보통 여러 개가 만들어져 사용된다.
이를 통틀어서 스프링 컨테이너라고 부를 수도 있다.

동일한(identical) 동일한 정보를 담고 있는(equivalent)
앱 컨텍스트는 싱글톤 레지스트리이기도 하다.
별다른 설정을 하지 않으면 내부에서 생성하는 빈 오브젝트를
모두 싱글톤으로 만든다. 이는 디자인 패턴과 동일한 개념이지만
구현 방법은 확연히 다르다.

스프링 컨테이너의 빈으로 등록하지 않은 싱글턴은
제약이 많다. JVM에 분산 설치된다면 이미 의미가 모호해지고
싱글톤 특유의 전역 상태는 권장되지 않는 프로그래밍 모델이다.
더불어 상속이 불가능하고 테스트도 자유롭지 않다.

스프링 빈으로 사용되는 클래스를 만들 때는 
가변 상태의 정보는 로컬에서 다루거나 파라미터를 사용한다.
물론 이때 read 전용 필드라면(변할 일이 없는) 상관없다.

스프링 빈의 스코프
 라이프 사이클과 적용 범위
기본 스코프는 싱글톤이며 강제로 제거하지 않는 한 
컨테이너에 계속 존재한다.

프로토타입 스코프
싱글톤과 달리 컨테이너에 빈을 요청할 때마다
매번 새로운 오브젝트를 만들어준다

요청 스코프
웹을 통해 새로운 HTTP 요청이 생길 때마다 생성된다

세션 스코프 
웹의 세션과 스코프가 유사하다

의존한다는 건 의존대상이 변하면 자신에게도 영향이 미치는 것
의존 관계에는 방향성이 있다. 일반적으로 인터페이스를 통해
이 의존성을 느슨하게 만들 수 있다.

의존 관계 주입의 세 가지 조건
클래스 모델이나 코드에는 런타임 시점 의존관계가 드러나지 않음.
그러기 위해선 인터페이스에만 의존하고 있어야 한다.
런타임 시점의 의존관계는 컨테이너나 팩토리 같은 제 3의 존재가 결정
의존관계는 사용할 오브젝트에 대한 레퍼런스를 외부에서 주입한다.
(클라이언트인 오브젝트가 누구와 연결될 지 알 수 없음)

ApplicationContext를 클라이언트 오브젝트에 선언하여
가져오는 방식은 의존관계 검색 방식이라고 부른다.
단순히 코드 작성 간에 생성자 매개변수를 통해
인스턴스를 집어 넣어 주는 건 우리가 말하는 의존성 주입이 아니다.

DI의 장점은 관심사의 분리(SoC)를 통한 높은 응집도에서 나온다.
스프링을 공부하는 건 DI를 어떻게 활용해야 할지를 공부하는 것이기도 함

"스프링은 전통적으로 메소드를 이용한 DI 방법 중에서
 수정자 메소드를 가장 많이 사용해왔다. XML을 사용하는 경우 
 자바빈 규약을 따르는 수정자 메소드가 가장 사용하기 편리하다"

xml
@Configuration => <beans>
@Bean methodName()  => <bean id="methodName"
return new BeanClass() => class="a.b.c...BeanClass">

자바빈의 관례를 따라서 수정자 메소드는 프로퍼티가 된다.
프로퍼티 이름은 메소드 이름에서 set을 제외한 나머지 부분을 사용
<propery> 태그는 name과 ref라는 두 개의 애트리뷰트를 갖는다
name은 프로퍼티의 이름이다. ref는 수정자 메소드를 통해
주입해줄 오브젝트의 빈 이름이다.

"name은 DI에 사용할 수정자 메소드의 프로퍼티 이름이며,
 ref는 주입할 오브젝트를 정의한 빈의 ID"

DTD와 스키마 : XML 문서의 구조를 정의하는 방법
특별한 이유가 없다면 DTD보다는 스키마를 사용하는 편이 바람직하다

- 책임이 다른 코드를 분리 (관심사의 분리, 리팩토링)
- 가변 클래스는 인터페이스를 구현하도록 (전략, OCP)
- 의존 클래스의 기능 변화에 따른 변경 요구 X (낮은 결합도)
- 자신의 책임, 관심사에만 집중 (높은 응집도)
- 오브젝트 간의 관계에 관한 제어권을 별도 클래스로 위임
- 빈으로서의 싱글톤, 디자인 패턴의 싱글톤의 차이
- DI 컨테이너에 관계 주입 위임
- 여러 주입 방법
- DI 설정 정보 작성 : 클래스 vs XML

"스프링이란 '어떻게 오브젝트가 설계되고, 만드렁지고,
 어떻게 관계를 맺고 사용되는지에 관심을 갖는 프레임워크'라는
 사실을 꼭 기억해두자, 스프링의 관심은 오브젝트와 그 관계다.
 하지만 오브젝트를 어떻게 설계하고, 분리하고, 개선하고,
 어떤 의존관계를 가질지 결정하는 일은 스프링이 아니라
 개발자의 역할이며 책임이다. 스프링은 단지 원칙을 잘 따르는 설계를 
 적용하려고 할 때 필연적으로 등장하는 번거로운 작업을
 편하게 할 수 있도록 도와주는 도구일 뿐임을 잊지 말자."

복잡해지는 애플리케이션의 변화에 대응하는 전략
1. 확장과 변화를 고려한 객체지향적 설계와
 그것을 효과적으로 담아낼 수 있는 IoC/DI 같은 기술
2. 만들어진 코드를 확신할 수 있게 해주고, 변화에
 유연하게 대처할 수 있는 자신감을 주는 테스트 기술

스프링의 또 하나의 핵심 : 테스트
단위 테스트 : 메소드 하나 수준의 작은 단위의 테스트

"대충하는 테스트는 마치 하루에 두 번은 정확히 맞는다는
 시계와 같을 수 있다. 죽은 시계 말이다."

"항상 네거티브 테스트를 먼저 만들라"

테스트 주도 개발 
Test Driven Development
아예 테스트를 먼저 만들고 그 테스트가 성공하도록 하는
코드만 만드는 식으로 진행하기 때문에 
테스트를 빼먹지 않고 꼼꼼하게 만들 수 있다.
많은 상황에서 테스트 주도 개발은 오히려 큰 문제를 피하고
꾸준한 단위 테스트를 통해 마음의 안정도 얻을 수 있다.

테스트 메소드를 실행할 때마다 테스트 클래스의
오브젝트를 새로 만든다.

@Autowired는 스프링의 DI에 사용된다.
















★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★
웹 모듈
소스코드는 보지말고 개념만 정리하자 포트폴리오가 우선
catchphraze
DAO 코드가 비대해지는 건 상관이 없는 것 같다.
오히려 적절한 대응책이 많다면 더 좋은 거 아닐까
접근 제한자와 import의 관계
import해서 default를 사용한다는 논리는 private에도 적용되어야하므로
 거짓이다.
서버는 하나다. 커넥션 풀이든 뭐든 멀티스레드 환경은 필요했다
configuration : 구성정보 내지는 형상정보라는 의미
용어는 메커니즘보다는 의도를 가지고 이름을 짓는 것이 좋다.
applicationConter new 연산자도 당연히 다른 주소를 가진다

★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★
인프런

객체를 생성할떄 1000 이라면 참조를 가져오는 건 1이면 될 정도로 차이남
// assertThat ~ same : "==", equals : ".equals"
99퍼는 싱글톤 빈만 쓴다고 보면 된다.
 
싱글톤 객체는 최대한 무상태로 설계해야 한다.
- 특정 클라이언트에 의존적인 필드가 있으면 안된다.
- 가변 객체 필드가 있으면 안된다
- 가급적 readonly로
- 필드 대신에 자바에서 공유되지 않는 지역변수, 파라미터
 스레드로컬 등을 사용해야한다.

@Configuration은 싱글톤을 위해 존재한다
config에서 new 를 통해 두 번 호출되어도 호출 로그를 보고
싱글턴으로 등록 시켜준다.

좋은 개발은 폐쇄적이다, 제약이 있다. (불변, 필수)

필드가 1개인 게 아니라 생성자가 1개라면 Autowired를 생략할 수 있다

컴포넌트스캔을 못돌릴거면 인젝션 어노테이션이 기능을 못함

init 같은 형식적인 메소드를 만든 뒤 
생성자와 비슷하게 만들어서도 인젝션이 가능하다. (잘안씀)

의존관계 자동 주입은 스프링 컨테이너가 관리하는 스프링 빈이어야함
(당연한 이야기지만 절대 잊어선 안됨)

생성자 주입 권장
파이널 키워드를 쓸 수 있다는 장점도 있음

롬복 라이브러리?
막상 개발을 해보면 거의 다 불변이고
생성자 + final 키워드를 사용하게 됨.
우선 get-setter 다 없애줘서 굉장히 편리하다
검색해보면 굉장히 많다
최근에는 생성자를 딱 1개 두고 오토와이어드를 생략하는 방법 주로 사용
거기에 롬복 라이브러리까지 사용해서 편하게 필드 추가도 가능

자바와 jsp 개념을 이해하고나니 최신 기능의 구조가 다 보인다

Quilifier 는 구분짓기 위한 이름.. 왜 필요할지
Primary를 통해 우선순위를 정해주는 게 더 좋을 것 같다
같이 쓸 수 있구나

업무 로직 빈 :
웹을 지원하는 컨트롤러, 핵심 비즈니스 로직이 있는 서비스
데이터 게층의 로직을 처리하는 리포지토리 등이 모두 업무 로직

기술 지원 빈 :
기술적인 문제나 공통 관심사를 처리할 때 주로 사용
데이터베이스 연결, 공통 로그 처리. 업무 로직을 지원하기 위한 기술

기술 지원 로직과 관련된 빈을
root에 config로 등록해주는 게 좋다(수동 빈)
MVC같은 업무로직은 자동 빈

비즈니스 로직 중에서 다형성을 적극 활용할 떄 (수동 빈)
ex) DiscountPolicyConfig

객체의 생성과 초기화를 분리하자

인터페이스를 사용하는 초기화, 종료 방법은 초창기 방법임 (2003)
@Bean(initMethod = "init", destroyMethod = "close")
그냥 애노테이션 @PostConstruct, @PreDestroy 쓰면 됨

javax < 공식 지원 패키지

ac.getBean을 통해 프로토타입 스코프 빈이 생성됨

자바 표준과 스프링이 제공하는 기능이 겹칠 때가 많이 있다.
특별히 다른 컨테이너를 사용할 일이 없다면,
스프링이 제공하는 기능을 사용하면 된다.

web 라이브러리를 추가하면
코어 어플리케이션에서 Application 기반 구현 클래스가 
웹 서블릿~ 으로 변경되어 서버가 구동됨

ObjectProvider과 같은 DL api 들은 
지연 처리에 좋다
웹 Scope를 처리할때 실제로 요청이 들어와야
객체를 인젝션 해줄 수 있는 상황이 있는데
이런 떄에 필요하다.

@Scope(value = "request",
	 proxyMode = ScopedProxyMode.TARGET_CLASS)
가짜 프록시 클래스를 만들어두고 HTTP request와 상관 없이
가짜 프록시 클래스를 다른 빈에 미리 주입해 둘 수 있다.
MyLogger$$EnhancerBySpringCGLIB$$5ddd9190
내부에 진짜 빈을 요청하는 위임 로직이 들어있다.
어쨌든 핵심 아이디어는 진짜 객체 조회를 꼭 필요한 시점까지 
지연처리 한다는 점이다.















